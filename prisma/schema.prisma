// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

generator zod {
  provider         = "zod-prisma-types"
  // output                           = "../src/prisma/schema/zod"
  output           = "../src/prisma/generated"
  createInputTypes = false
  coerceDate       = true
}

datasource db {
  provider = "cockroachdb"
  url      = env("COCKROACH_DATABASE_URL")
}

model Test {
  id       BigInt   @id @default(sequence())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  message  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  pinnedBusinessCardId String?                @unique
  accounts             Account[]
  sessions             Session[]
  interestTags         InterestTag[]
  goodArts             ArtGoodUser[]
  artAppeals           ArtAppeal[]
  watchingArts         WatchingArt[]
  bookmarkArts         BookmarkArt[]
  followers            Follower[]             @relation("followers")
  following            Follower[]             @relation("followings")
  blockUsers           BlockUser[]            @relation("blockUsers")
  blocking             BlockUser[]            @relation("blocking")
  businessCards        BusinessCard[]         @relation("user")
  goodBusinessCards    BusinessCardGoodUser[]
  ranks                UserRank[]
  notifications        Notification[]
  arts                 Art[]
  RelatedArt           RelatedArt[]
  pinnedBusinessCard   BusinessCard?          @relation("pinned", fields: [pinnedBusinessCardId], references: [businessCardId])
  targetComments       UserComment[]          @relation("target")
  comments             UserComment[]          @relation("comment")
  commentGoodUsers     UserCommentGoodUser[]
  artEditHistory       ArtEditHistory[]
}

model UserComment {
  commentId     String                @id @default(cuid())
  content       String
  targetUserId  String
  targetUser    User                  @relation("target", fields: [targetUserId], references: [id])
  commentUserId String
  commentUser   User                  @relation("comment", fields: [commentUserId], references: [id])
  goodUsers     UserCommentGoodUser[]
  createAt      DateTime              @default(now())
  updateAt      DateTime              @updatedAt

  @@index([targetUserId])
}

model UserCommentGoodUser {
  commentId  String
  goodUserId String
  comment    UserComment @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  goodUser   User        @relation(fields: [goodUserId], references: [id])

  @@id([commentId, goodUserId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follower {
  userId     String
  followerId String
  user       User   @relation("followers", fields: [userId], references: [id])
  follower   User   @relation("followings", fields: [followerId], references: [id])

  @@id([userId, followerId])
  @@index([userId])
  @@index([followerId])
}

model BlockUser {
  userId      String
  blockUserId String
  user        User   @relation("blockUsers", fields: [userId], references: [id])
  blockUser   User   @relation("blocking", fields: [blockUserId], references: [id])

  @@id([userId, blockUserId])
}

model UserRank {
  userId String
  rank   String
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, rank])
}

// Domain

// Art

model Art {
  artId       String @id @default(cuid()) /// @zod.custom.use(z.string())
  title       String
  imageUrl    String
  description String
  searchId    Int?

  tags                   ArtTag[]
  goodUsers              ArtGoodUser[]
  appeals                ArtAppeal[]
  watchingUsers          WatchingArt[]
  bookmarkUsers          BookmarkArt[]
  useAsLikeBusinessCards BusinessCardLikeArt[]
  relatedArtArt          RelatedArt[]          @relation("art")
  relatedArts            RelatedArt[]          @relation("relatedArt")

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  editHistory ArtEditHistory[]

  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
}

model ArtEditHistory {
  artId    String
  updateAt DateTime @default(now())
  art      Art      @relation(fields: [artId], references: [artId], onDelete: Cascade)

  // updateUserIdがNULLになるのはユーザが削除された場合
  updateUserId String?
  updateUser   User?   @relation(fields: [updateUserId], references: [id], onDelete: SetNull)

  // 変更したデータ
  title       ArtTitleEditHistory?
  imageUrl    ArtImageUrlEditHistory?
  description ArtDescriptionEditHistory?
  tags        ArtTagsEditHistory[]

  @@id([artId, updateAt])
}

model ArtTitleEditHistory {
  artId    String
  updateAt DateTime

  title String

  artEditHistory ArtEditHistory @relation(fields: [artId, updateAt], references: [artId, updateAt])

  @@id([artId, updateAt])
}

model ArtImageUrlEditHistory {
  artId    String
  updateAt DateTime

  imageUrl String

  artEditHistory ArtEditHistory @relation(fields: [artId, updateAt], references: [artId, updateAt])

  @@id([artId, updateAt])
}

model ArtDescriptionEditHistory {
  artId    String
  updateAt DateTime

  description String

  artEditHistory ArtEditHistory @relation(fields: [artId, updateAt], references: [artId, updateAt])

  @@id([artId, updateAt])
}

model ArtTagsEditHistory {
  artId    String
  updateAt DateTime

  tags String[]

  artEditHistory ArtEditHistory @relation(fields: [artId, updateAt], references: [artId, updateAt])

  @@id([artId, updateAt])
}

// Art.searchIdはユーザから変更することはないので履歴を保持しない

model RelatedArt {
  userId       String
  artId        String
  relatedArtId String
  type         RelatedArtType
  user         User           @relation(fields: [userId], references: [id])
  art          Art            @relation("art", fields: [artId], references: [artId], onDelete: Cascade)
  relatedArt   Art            @relation("relatedArt", fields: [relatedArtId], references: [artId], onDelete: Cascade)

  // TODO index([artId, relatedArtId])

  @@id([artId, relatedArtId]) // TODO userIdを追加
  @@index([artId, userId])
  @@index([artId])
}

enum RelatedArtType {
  PREV // 前に見た作品
  NEXT // 後に見た作品
}

model ArtTag {
  artId   String
  tagType ArtTagType
  tag     String
  art     Art        @relation(fields: [artId], references: [artId], onDelete: Cascade)

  @@id([artId, tag])
  @@index([artId])
}

enum ArtTagType {
  MEDIA
  GENRE
  OTHER
  CUSTOM
}

model InterestTag {
  userId String
  tag    String
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, tag])
  @@index([userId])
}

model ArtGoodUser {
  artId    String
  userId   String
  art      Art    @relation(fields: [artArtId], references: [artId], onDelete: Cascade)
  artArtId String
  user     User   @relation(fields: [userId], references: [id])

  @@id([artId, userId])
  @@index([artId])
  @@index([userId])
}

model ArtAppeal {
  userId    String
  artId     String
  likePoint String
  user      User   @relation(fields: [userId], references: [id])
  art       Art    @relation(fields: [artId], references: [artId], onDelete: Cascade)

  @@id([userId, artId])
  @@index([userId])
  @@index([artId])
}

model WatchingArt {
  userId String
  artId  String
  user   User   @relation(fields: [userId], references: [id])
  art    Art    @relation(fields: [artId], references: [artId], onDelete: Cascade)

  @@id([userId, artId])
  @@index([userId])
}

model BookmarkArt {
  userId String
  artId  String
  user   User   @relation(fields: [userId], references: [id])
  art    Art    @relation(fields: [artId], references: [artId], onDelete: Cascade)

  @@id([userId, artId])
}

// BusinessCard

model BusinessCard {
  businessCardId     String                    @id @default(cuid())
  userId             String
  type               String
  name               String
  rank               String?
  themeColor         String
  imageUrl           String
  backgroundImageUrl String
  isPublish          Boolean                   @default(false)
  canComment         Boolean
  user               User                      @relation("user", fields: [userId], references: [id])
  likeArts           BusinessCardLikeArt[]
  interestTags       BusinessCardInterestTag[]
  goodUsers          BusinessCardGoodUser[]
  pinned             User?                     @relation("pinned")

  @@index([userId])
}

model BusinessCardLikeArt {
  businessCardId String
  no             String       @default(cuid()) // TODO @default(sequence()) にしたいがエラーが出るのでcuidにしている
  likeArtTitle   String
  businessCard   BusinessCard @relation(fields: [businessCardId], references: [businessCardId], onDelete: Cascade)
  Art            Art?         @relation(fields: [artArtId], references: [artId], onDelete: Cascade)
  artArtId       String?

  @@id([businessCardId, no])
  @@index([businessCardId])
}

model BusinessCardInterestTag {
  businessCardId String
  tag            String

  BusinessCard BusinessCard @relation(fields: [businessCardId], references: [businessCardId], onDelete: Cascade)

  @@id([businessCardId, tag])
  @@index([businessCardId])
}

model BusinessCardGoodUser {
  businessCardId String
  userId         String
  businessCard   BusinessCard @relation(fields: [businessCardId], references: [businessCardId], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@id([businessCardId, userId])
}

// Notification

model Notification {
  notificationId String @id @default(cuid())
  userId         String
  content        String
  type           String
  user           User   @relation(fields: [userId], references: [id])

  @@index([userId, type, content])
  @@index([userId])
}
