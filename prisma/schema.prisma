// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  // output                           = "../src/prisma/schema/zod"
  output           = "../src/prisma/generated"
  createInputTypes = false
  coerceDate       = true
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Test {
  id       BigInt   @id @default(sequence())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  message  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                        @id @default(cuid())
  name                     String?
  email                    String?                       @unique
  emailVerified            DateTime?
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  interestTags             InterestTag[]
  goodArts                 ArtGoodUser[]
  recommendedArts          RecommendArt[]
  watchingArts             WatchingArt[]
  bookmarkArts             BookmarkArt[]
  followers                Follower[]                    @relation("followers")
  following                Follower[]                    @relation("followings")
  blockUsers               BlockUser[]                   @relation("blockUsers")
  blocking                 BlockUser[]                   @relation("blocking")
  businessCards            BusinessCard[]
  goodBusinessCardComments BusinessCardCommentGoodUser[]
  goodBusinessCards        BusinessCardGoodUser[]
  ranks                    UserRank[]
  notifications            Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follower {
  userId     String
  followerId String
  user       User   @relation("followers", fields: [userId], references: [id])
  follower   User   @relation("followings", fields: [followerId], references: [id])

  @@id([userId, followerId])
}

model BlockUser {
  userId      String
  blockUserId String
  user        User   @relation("blockUsers", fields: [userId], references: [id])
  blockUser   User   @relation("blocking", fields: [blockUserId], references: [id])

  @@id([userId, blockUserId])
}

model UserRank {
  userId String
  rank   String
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, rank])
}

// Domain

// Art

model Art {
  artId                  String                @id @default(cuid())
  title                  String
  imageUrl               String
  description            String
  relatedArt             RelatedArt[]
  tags                   ArtTag[]
  goodUsers              ArtGoodUser[]
  reccomendUsers         RecommendArt[]
  watchingUsers          WatchingArt[]
  bookmarkUsers          BookmarkArt[]
  useAsLikeBusinessCards BusinessCardLikeArt[]
}

model RelatedArt {
  artId        String
  relatedArtId String
  relatedArt   Art    @relation(fields: [relatedArtId], references: [artId])

  @@id([artId, relatedArtId])
}

model ArtTag {
  artId String
  tag   String
  art   Art    @relation(fields: [artId], references: [artId])

  @@id([artId, tag])
}

model InterestTag {
  userId String
  tag    String
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, tag])
}

model ArtGoodUser {
  artId    String
  userId   String
  art      Art    @relation(fields: [artArtId], references: [artId])
  artArtId String
  user     User   @relation(fields: [userId], references: [id])

  @@id([artId, userId])
}

model RecommendArt {
  userId    String
  artId     String
  likePoint String
  user      User   @relation(fields: [userId], references: [id])
  art       Art    @relation(fields: [artId], references: [artId])

  @@id([userId, artId])
}

model WatchingArt {
  userId String
  artId  String
  user   User   @relation(fields: [userId], references: [id])
  art    Art    @relation(fields: [artId], references: [artId])

  @@id([userId, artId])
}

model BookmarkArt {
  userId String
  artId  String
  user   User   @relation(fields: [userId], references: [id])
  art    Art    @relation(fields: [artId], references: [artId])

  @@id([userId, artId])
}

// BusinessCard

model BusinessCard {
  businessCardId     String                 @id @default(cuid())
  userId             String
  backgroundImageUrl String
  canComment         Boolean
  user               User                   @relation(fields: [userId], references: [id])
  likeArts           BusinessCardLikeArt[]
  comments           BusinessCardComment[]
  goodUsers          BusinessCardGoodUser[]
}

model BusinessCardLikeArt {
  businessCardId String
  likeArtId      String
  businessCard   BusinessCard @relation(fields: [businessCardId], references: [businessCardId])
  likeArt        Art          @relation(fields: [likeArtId], references: [artId])

  @@id([businessCardId, likeArtId])
}

model BusinessCardRank {
  businessCardId String
  rank           String

  @@id([businessCardId, rank])
}

model BusinessCardComment {
  commentId      String                        @id @default(cuid())
  businessCardId String
  content        String
  businessCard   BusinessCard                  @relation(fields: [businessCardId], references: [businessCardId])
  goodUsers      BusinessCardCommentGoodUser[]
}

model BusinessCardCommentGoodUser {
  commentId  String
  goodUserId String
  comment    BusinessCardComment @relation(fields: [commentId], references: [commentId])
  goodUser   User                @relation(fields: [goodUserId], references: [id])

  @@id([commentId, goodUserId])
}

model BusinessCardGoodUser {
  businessCardId String
  userId         String
  businessCard   BusinessCard @relation(fields: [businessCardId], references: [businessCardId])
  user           User         @relation(fields: [userId], references: [id])

  @@id([businessCardId, userId])
}

// Notification

model Notification {
  notificationId String @id @default(cuid())
  userId         String
  content        String
  type           String
  user           User   @relation(fields: [userId], references: [id])
}
